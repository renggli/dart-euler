// Problem 12: Highly divisible triangular number
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
// first ten terms would be:
//
//     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?
const divisors = 500;

int numberOfDivisors(int n) {
  var c = 0, d = 1;
  while (d * d < n) {
    if (n % d == 0) {
      c += 2;
    }
    d++;
  }
  if (d * d == n) {
    c++;
  }
  return c;
}

void main() {
  var i = 1, t = 0;
  for (;;) {
    t += i;
    if (numberOfDivisors(t) > divisors) {
      assert(t == 76576500);
      return;
    }
    i++;
  }
}
